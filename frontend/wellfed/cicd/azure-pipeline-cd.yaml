name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.SourceBranchName)  # Pipeline naming convention.

trigger: none  # No automatic triggers.

variables: 
  - group: wellfed-variablegroup  # Uses a pre-defined variable group.

parameters: 
  - name: version 
    displayName: Version  # Parameter for versioning.
    type: string 
    default: '0.0.6'  # Default version value.

jobs:
  - job: wellfed_frontend_CD_pipeline
    pool:
      vmImage: 'ubuntu-latest'  # Runs the job on the latest Ubuntu image.

    steps:

      # Step 1: Install SOPS
      #- task: Bash@3
      #  displayName: "Install SOPS"
      #  inputs:
      #    targetType: inline
      #    script: |
      #      sudo apt-get update
      #      sudo apt-get install -y sops

      # Step 2: Clone the AKS-CONFIG Repository
      #- task: Bash@3
      #  displayName: "Clone Variables Repository"
      #  env:
      #   GIT_USERNAME: "$(git_username)"
      #    GIT_PASSWORD: "$(git_password)"
      #    REPO_URL: "https://github.com/your-org/AKS-CONFIG"
      #  inputs:
      #    targetType: inline
      #    script: |
      #      git clone https://$(GIT_USERNAME):$(GIT_PASSWORD)@github.com/your-org/AKS-CONFIG aks-config

      # Step 3: Decrypt Encrypted Files
      #- task: Bash@3
      #  displayName: "Decrypt Encrypted Variables"
      #  inputs:
      #    targetType: inline
      #    script: |
      #      mkdir -p $(Pipeline.Workspace)/decrypted
      #      sops -d AKS-config/credentials/backend.enc.yaml > $(Pipeline.Workspace)/decrypted/backend.yaml
      #      sops -d AKS-config/credentials/frontend.enc.yaml > $(Pipeline.Workspace)/decrypted/frontend.yaml

      # Step 4: Export Variables as Environment Variables
      #- task: Bash@3
      #  displayName: "Export Variables from Decrypted Files"
      #  inputs:
      #    targetType: inline
      #    script: |
      #      export $(cat $(Pipeline.Workspace)/decrypted/backend.yaml | xargs)
      #      export $(cat $(Pipeline.Workspace)/decrypted/frontend.yaml | xargs)


      - script: |
          echo "Version: $(version)"
          VERSION=$(version)
          echo "VERSION: $VERSION"
        displayName: "Debug Version Parameter"

      - task: Bash@3
        displayName: "Run Ansible Playbook"
        inputs:
          targetType: 'inline'
          script: |
            set -e  # Exit on error
            echo "Current Directory:"
            pwd
            VERSION=$(version)
            echo "VERSION: $VERSION"  # Debug version parameter
            cd ${source_dir}/frontend/wellfed
            echo "Current Directory after changing:"
            pwd
            echo "Directory Listing:"
            ls -lrt
            echo "Running Ansible Playbook:"
            ansible-playbook cicd/ansible/cd.yaml -i "localhost," -e version=$VERSION -v
        env:
          git_username: "$(git_username)"
          git_password: "$(git_password)"
          subscription_id: "$(subscription_id)"
          service_principal_id: "$(service_principal_id)"
          service_principal_secret: "$(service_principal_secret)"
          acr_regisroty_url: "$(acr_regisroty_url)"
          acr_username: "$(acr_username)"
          tenant_id: "$(tenant_id)"
          service_name: "$(service_name)"
          source_dir: "$(Build.SourcesDirectory)"
          aks_cluster: "$(aks_cluster)"
          resource_group: "$(resource_group)"
          version: "$(version)"
